import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

 class Product {
    private String name;
    private double price;
    private int quantity;

    public Product(String name, double price, int quantity) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public String displayDetails() {
        return "Product Name: " + name + ", Price: $" + price + ", Quantity: " + quantity;
    }
}


class Inventory {
    private Product[] products;
    private int count;

    public Inventory(int size) {
        products = new Product[size];
        count = 0;
    }

    public String addProduct(Product product) {
        if (count < products.length) {
            products[count] = product;
            count++;
            return "Product added successfully.";
        } else {
            return "Inventory is full. Cannot add more products.";
        }
    }

    public String updateProduct(String name, double newPrice, int newQuantity) {
        for (int i = 0; i < count; i++) {
            if (products[i].getName().equalsIgnoreCase(name)) {
                products[i].setPrice(newPrice);
                products[i].setQuantity(newQuantity);
                return "Product updated successfully.";
            }
        }
        return "Product not found.";
    }

    public String updateQuantity(String name, int newQuantity) {
        for (int i = 0; i < count; i++) {
            if (products[i].getName().equalsIgnoreCase(name)) {
                products[i].setQuantity(newQuantity);
                return "Product quantity updated successfully.";
            }
        }
        return "Product not found.";
    }

    public double getProductPrice(String name) {
        for (int i = 0; i < count; i++) {
            if (products[i].getName().equalsIgnoreCase(name)) {
                return products[i].getPrice();
            }
        }
        return -1;
    }

    public String displayAllProducts() {
        if (count == 0) {
            return "No products in the inventory.";
        }
        StringBuilder details = new StringBuilder();
        for (int i = 0; i < count; i++) {
            details.append(products[i].displayDetails()).append("\n");
        }
        return details.toString();
    }
}

public class Main{

    private Inventory inventory;

    public Main(int inventorySize) {
        inventory = new Inventory(inventorySize);
        createGUI();
    }

    private void createGUI() {
        JFrame frame = new JFrame("Inventory Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 150);
        frame.setResizable(false);

        JTextField nameField = new JTextField(15);
        JTextField priceField = new JTextField(15);
        JTextField quantityField = new JTextField(15);

        JButton addButton = new JButton("Add Product");
        JButton updateButton = new JButton("Update Product");
        JButton updateQuantityButton = new JButton("Update Quantity");
        JButton displayButton = new JButton("Display Products");

        JTextArea displayArea = new JTextArea(2, 3);
        displayArea.setEditable(false);

        JPanel inputPanel = new JPanel();
        inputPanel.add(new JLabel("Name:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Price:"));
        inputPanel.add(priceField);
        inputPanel.add(new JLabel("Quantity:"));
        inputPanel.add(quantityField);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(displayButton);

        JScrollPane scrollPane = new JScrollPane(displayArea);

        frame.setLayout(new BorderLayout());
        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(buttonPanel, BorderLayout.CENTER);
        frame.add(scrollPane, BorderLayout.SOUTH);

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name = nameField.getText();
                try {
                    double price = Double.parseDouble(priceField.getText());
                    int quantity = Integer.parseInt(quantityField.getText());
                    Product product = new Product(name, price, quantity);
                    displayArea.setText(inventory.addProduct(product));
                } catch (NumberFormatException ex) {
                    displayArea.setText("Invalid input. Please enter numeric values for price and quantity.");
                }
            }
        });

        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name = nameField.getText();
                try {
                    double price = Double.parseDouble(priceField.getText());
                    int quantity = Integer.parseInt(quantityField.getText());
                    displayArea.setText(inventory.updateProduct(name, price, quantity));
                } catch (NumberFormatException ex) {
                    displayArea.setText("Invalid input. Please enter numeric values for price and quantity.");
                }
            }
        });

        updateQuantityButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name = nameField.getText();
                try {
                    int quantity = Integer.parseInt(quantityField.getText());
                    displayArea.setText(inventory.updateQuantity(name, quantity));
                } catch (NumberFormatException ex) {
                    displayArea.setText("Invalid input. Please enter a numeric value for quantity.");
                }
            }
        });

        displayButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayArea.setText(inventory.displayAllProducts());
            }
        });

        frame.setVisible(true);
    }

    public static void main(String[] args) {
        new Main(3);
    }
}
